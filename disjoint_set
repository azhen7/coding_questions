#ifndef _DISJOINT_SET
#define _DISJOINT_SET

#include <utility>
#include <vector>

typedef unsigned long long ULL;

struct edge
{
    ULL src;
    ULL dest;
};

struct forest
{
    ULL numberOfNodes;
    ULL numberOfEdges;
    edge* edges;
    
    std::vector<ULL> parent;
    std::vector<ULL> setSize;

    forest(ULL a, ULL b)
    {
        numberOfNodes = a;
        numberOfEdges = b;

        edges = new edge[numberOfEdges];
    }

    ULL findSet(ULL i)
    {
        if (parent[i] == i)
            return i;
        parent[i] = findSet(parent[i]);
        return parent[i];
    }

    ULL unionSet(ULL i, ULL j)
    {
        ULL x = findSet(i);
        ULL y = findSet(j);

        if (x == y)
        {
            return 1;
        }

        parent[x] = y;
        setSize[y] += setSize[x];
        return 0;
    }
};

ULL initialize(forest& f)
{
    f.parent.reserve(f.numberOfNodes);
    f.setSize.assign(f.numberOfNodes, 1);
    
    for (ULL i = 0; i < f.numberOfNodes; i++)
    {
        f.parent[i] = i;
    }

    ULL countDuplicates = 0;
    for (ULL i = 0; i < f.numberOfNodes; i++)
    {
        countDuplicates += f.unionSet(f.edges[i].src, f.edges[i].dest);
    }

    return countDuplicates;
}



#endif /* _DISJOINT_SET */